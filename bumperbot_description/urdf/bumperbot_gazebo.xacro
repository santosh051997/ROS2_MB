<?xml version="1.0"?>

<robot name="bumperbot" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Move this one to ros2 control -->
  <!-- The transmission element is used to link actuators to joints.-->
  <!-- Provides more details about how the joints are driven by physical actuators.-->
  <transmission name="wheel_right_transmission">
    <plugin>transmission_interface/SimpleTransmission</plugin>
    <actuator name="wheel_right_motor" role="actuator_right"/>
    <joint name="wheel_right_joint"    role="joint_right">
      <mechanical_reduction>1.0</mechanical_reduction>
    </joint>
  </transmission>

  <transmission name="wheel_left_transmission">
    <plugin>transmission_interface/SimpleTransmission</plugin>
    <actuator name="wheel_left_motor" role="actuator_left"/>
    <joint name="wheel_left_joint"    role="joint_left">
      <mechanical_reduction>1.0</mechanical_reduction>
    </joint>
  </transmission>

  <!--Specify Gazebo parameters that are used in simulation environment.-->
  <!-- Wheels -->
  <gazebo reference="wheel_left_link">
    <mu1>1000000000000000.0</mu1>
    <mu2>1000000000000000.0</mu2>
    <kp>1000000000000.0</kp>
    <kd>10.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.1</maxVel>
    <fdir1>1 0 0</fdir1>
  </gazebo>

  <gazebo reference="wheel_right_link">
    <mu1>1000000000000000.0</mu1>
    <mu2>1000000000000000.0</mu2>
    <kp>1000000000000.0</kp>
    <kd>10.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.1</maxVel>
    <fdir1>1 0 0</fdir1>
  </gazebo>
    
  <!-- Caster Wheels -->
  <gazebo reference="caster_rear_link">
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>
    
  <gazebo reference="caster_front_link">
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>

  <!-- Gazebo plugin need to be added to urdf that actually parses the transmission tags-->
  <!-- and load appropriate hardware interfaces and controller manager-->
  <!-- To simulate virtual actuators based on some kind of command input and publish resulting joint angles on joint_states topic-->
  <!-- Then robot_state_publisher will have the information it needs to broadcast all the transforms-->
  <!-- ROS 2 Control -->
  
  <!-- <gazebo>
    <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
      <robot_param>robot_description</robot_param>
      <robot_param_node>robot_state_publisher</robot_param_node>
      <parameters>$(find bumperbot_controller)/config/bumperbot_controllers.yaml</parameters>
    </plugin>
  </gazebo> -->

  <gazebo>
        <plugin filename="libgazebo_ros_diff_drive.so" name="gazebo_base_controller">
          <odometry_frame>odom</odometry_frame>
          <commandTopic>cmd_vel</commandTopic>
          <publish_odom>true</publish_odom>
          <publish_odom_tf>true</publish_odom_tf>
          <update_rate>15.0</update_rate>
          <left_joint>wheel_left_joint</left_joint>
          <right_joint>wheel_right_joint</right_joint>
          <wheel_separation>0.17</wheel_separation>
          <wheel_diameter>0.066</wheel_diameter>
          <max_wheel_acceleration>0.7</max_wheel_acceleration>
          <robotBaseFrame>base_link</robotBaseFrame>
    
        </plugin>
    </gazebo>

    <gazebo reference="base_link">
      <material>Gazebo/Black</material>
    </gazebo>
    <gazebo reference="caster_front_link">
      <material>Gazebo/White</material>
    </gazebo>

    <gazebo reference="caster_rear_link">
      <material>Gazebo/White</material>
    </gazebo>
    
    <gazebo reference="wheel_right_link">
      <material>Gazebo/Orange</material>
    </gazebo>
    <gazebo reference="wheel_left_link">
      <material>Gazebo/Orange</material>
    </gazebo> 

  <!-- IMU -->
  <gazebo reference="imu_link">
    <sensor name="imu" type="imu">
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
        <plugin name="imu" filename="libgazebo_ros_imu_sensor.so"/>
    </sensor>
  </gazebo>

</robot>